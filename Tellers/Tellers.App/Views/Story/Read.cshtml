@using System.Security.Claims;
@using Tellers.Services.Interfaces;
@using Tellers.ViewModels.Story;
@model StoryDetailsViewModel
@inject IUserService userService

<div class="container align-content-center" style="margin-top: 10rem">
    <main role="main" class="pb-3 embed-responsive">
        <div class="jumbotron p-3 p-md-5 text-white rounded bg-dark d-inline-flex col-12">
            <div class="col-md-6 px-0 ">
                <h1 class="display-4 font-italic">@Model.Title</h1>
                <h3 class="font-italic">
                    Author:
                    @if (string.IsNullOrEmpty(Model.ExternalAuthorName) == false)
                    {
                        @($"{Model.ExternalAuthorName} (EXTERNAL AUTHOR)")
                        ;
                    }
                    else if (await userService.HasRole(Model.CreatorUserId, RoleNames.MasterAdminRoleName) ||
                    await userService.HasRole(Model.CreatorUserId, RoleNames.AdminRoleName) ||
                    await userService.HasRole(Model.CreatorUserId, RoleNames.ModeratorRoleName))
                    {
                        @("Tellers team")
                        ;
                    }
                    else
                    {
                        @((Model.CreatorFirstName == null ? string.Empty :
                            Model.CreatorFirstName +
                            (Model.CreatorMiddleName == null ? string.Empty : $" {Model.CreatorMiddleName}") +
                            (Model.CreatorLastName == null ? string.Empty : $" {Model.CreatorLastName}") +
                            (Model.CreatorPseudonym == null ? string.Empty : $" - {Model.CreatorPseudonym}")) == string.Empty
                            ?
                            (Model.CreatorUsername == null ? "Unknown post creator." : Model.CreatorUsername)
                            :
                            (Model.CreatorFirstName == null ? string.Empty :
                            Model.CreatorFirstName +
                            (Model.CreatorMiddleName == null ? string.Empty : $" {Model.CreatorMiddleName}") +
                            (Model.CreatorLastName == null ? string.Empty : $" {Model.CreatorLastName}") +
                            (Model.CreatorPseudonym == null ? string.Empty : $" - {Model.CreatorPseudonym}")))
                    }
                </h3>
                <span class="badge rounded-pill bg-success">Story type: @Model.StoryType</span>

                @if (Model.Genres.Count() > 0)
                {
                    @foreach (var genre in Model.Genres)
                    {
                        <span class="badge rounded-pill bg-warning text-black">@genre</span>
                    }
                }
                <p class="lead my-3">@Model.StorySummary</p>
                <p class="lead mb-0 blog-post-meta" style="margin-top: 5em">

                    <a asp-action="Info" asp-controller="Profile" asp-route-profileId="@Model.CreatorId" >
                        <img class="rounded-circle shadow-1-strong me-3"
                             src="@(string.IsNullOrWhiteSpace(Model.CreatorPictureUrl) == false ? Model.CreatorPictureUrl : "/images/profilePicDefault.png")" alt="avatar" width="65"
                             height="65" />
                    </a>

                    by
                    @((Model.CreatorFirstName == null ? string.Empty :
                        Model.CreatorFirstName +
                        (Model.CreatorMiddleName == null ? string.Empty : $" {Model.CreatorMiddleName}") +
                        (Model.CreatorLastName == null ? string.Empty : $" {Model.CreatorLastName}") +
                        (Model.CreatorPseudonym == null ? string.Empty : $" - {Model.CreatorPseudonym}")) == string.Empty
                        ?
                        (Model.CreatorUsername == null ? "Unknown post creator." : Model.CreatorUsername)
                        :
                        (Model.CreatorFirstName == null ? string.Empty :
                        Model.CreatorFirstName +
                        (Model.CreatorMiddleName == null ? string.Empty : $" {Model.CreatorMiddleName}") +
                        (Model.CreatorLastName == null ? string.Empty : $" {Model.CreatorLastName}") +
                        (Model.CreatorPseudonym == null ? string.Empty : $" - {Model.CreatorPseudonym}")))


                </p>
                posted on: @Model.Day-@Model.Month-@Model.Year



                <form method="post" style="margin-top: 3rem">

                    @if (User.IsInRole(RoleNames.MasterAdminRoleName) ||
                    User.IsInRole(RoleNames.AdminRoleName) ||
                    User.IsInRole(RoleNames.ModeratorRoleName) ||
                    User.Identity.Name == Model.CreatorUsername)
                    {
                        <button class="btn btn-outline-danger btn-lg px-4 gap-3" asp-action="Delete" asp-controller="Story" asp-route-storyId="@Model.StoryId" style="background-color: none">
                            Delete
                        </button>

                    }
                    @if (User.Identity.Name != Model.CreatorUsername)
                    {
                        if (Model.IsMarkedAsReaded)
                        {
                            <button class="btn btn-info btn-lg px-4 gap-3" asp-action="MarkAsReaded" asp-controller="Story" asp-route-storyId="@Model.StoryId" style="background-color: none">
                                Readed
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-info btn-lg px-4 gap-3" asp-action="MarkAsReaded" asp-controller="Story" asp-route-storyId="@Model.StoryId" style="background-color: none">
                                Mark as readed
                            </button>
                        }
                    }

                    @if (User.Identity.Name == Model.CreatorUsername)
                    {
                        <a class="btn btn-outline-success btn-lg px-4 gap-3" asp-action="Edit" asp-controller="Story" asp-route-storyId="@Model.StoryId" style="background-color: none">
                            Edit
                        </a>
                    }
                </form>
                
            </div>
            <img src="@(Model.BookCoverPicture ?? "/images/no-book-cover-available.jpg")" class="img-fluid col-md-6 overflow-hidden" alt="book cover">
        </div>

        <div class="ratio ratio-16x9 viewPDF" style="margin-top: 0.5em;">
        </div>
    </main>
    <section style="background-color: #e7effd; padding-bottom: 3em; padding-top: 2em">

        <nav aria-label="...">
            <ul class="pagination pagination-sm justify-content-center">
                @for (int i = 1; i <= (int)Math.Ceiling(Model.TotalRevues / 5.0); i++)
                {
                    @if(i == Model.Page)
                    {
                        <li class="page-item active" aria-current="page">
                        <a class="page-link" asp-action="Read" asp-controller="Story" asp-route-storyId="@Model.StoryId" asp-route-page="@i" asp-fragment="revues">@i</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item" aria-current="page">
                            <a class="page-link" asp-action="Read" asp-controller="Story" asp-route-storyId="@Model.StoryId" asp-route-page="@i" asp-fragment="revues">@i</a>
                        </li>
                    }

                }
            </ul>
        </nav>

        <h3 class="display-6 font-italic justify-content-center text-center fw-bold" id="revues">Revues:</h3>
        
        <partial name="_ReadRevuesPartial.cshtml" model="@Model.Revues" />

        <nav aria-label="...">
            <ul class="pagination pagination-sm justify-content-center">
                @for (int i = 1; i <= (int)Math.Ceiling(Model.TotalRevues / 5.0); i++)
                {
                    @if (i == Model.Page)
                    {
                        <li class="page-item active" aria-current="page">
                            <a class="page-link" asp-action="Read" asp-controller="Story" asp-route-storyId="@Model.StoryId" asp-route-page="@i" asp-fragment="revues">@i</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item" aria-current="page">
                            <a class="page-link" asp-action="Read" asp-controller="Story" asp-route-storyId="@Model.StoryId" asp-route-page="@i" asp-fragment="revues">@i</a>
                        </li>
                    }

                }
            </ul>
        </nav>

        <div class="d-grid gap-2 d-sm-flex justify-content-sm-center" style="margin-top: 5em; margin-bottom: 3em">
            <a type="button" class="btn btn-outline-success btn-lg px-4 gap-3" asp-controller="Revue" asp-action="Create" asp-route-storyId="@Model.StoryId">Аdd a Revue</a>
        </div>
        <div></div>
    </section>

</div>
<label id="pdfUrl" hidden>@Model.PdfFileUrl</label>
@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.2.8/pdfobject.min.js" integrity="sha512-MoP2OErV7Mtk4VL893VYBFq8yJHWQtqJxTyIAsCVKzILrvHyKQpAwJf9noILczN6psvXUxTr19T5h+ndywCoVw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="text/javascript">

        let label = document.getElementById("pdfUrl");
        let url = label.textContent;

        let urlEmbeding = `https://docs.google.com/gview?url=${url}&embedded=true`;
        if (url.includes('drive.google.com')) {
            urlEmbeding = url;
        }

        if (PDFObject.supportsPDFs) {
            PDFObject.embed(urlEmbeding + "#toolbar=0&pagemode=none", ".viewPDF",)
        } else {
            let result = confirm("This browser does not support PDFObject. Do you want to stay and read story summury?");

            if (!result) {
                window.location.href = "/";
            }
        }
    </script>
    <script type="text/javascript">
        'use strict'
        let elementsNumber = document.querySelectorAll(".starRatingLable").length;

        for (let i = 1; i <= elementsNumber; i++) {
            let rating = Number(document.getElementById(`ratingStar${i}`).textContent);

            if (rating >= 1) {
                document.querySelector(`.fa.fa-star.oneStar${i}`).classList.add("checked");
            }
            if (rating >= 2) {
                document.querySelector(`.fa.fa-star.twoStar${i}`).classList.add("checked");
            }
            if (rating >= 3) {
                document.querySelector(`.fa.fa-star.threeStar${i}`).classList.add("checked");
            }
            if (rating >= 4) {
                document.querySelector(`.fa.fa-star.fourStar${i}`).classList.add("checked");
            }
            if (rating >= 5) {
                document.querySelector(`.fa.fa-star.fiveStar${i}`).classList.add("checked");
            }
        }




    </script>

}
}

@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
}

